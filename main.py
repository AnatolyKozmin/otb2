import asyncio
import json
import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from datetime import datetime, timedelta
from dotenv import load_dotenv
load_dotenv()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TOKEN')
ADDRESS = "–í–µ—à–Ω—è–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open('data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"users": {}, "slots": {}, "last_update": ""}

def save_data(data):
    data['last_update'] = datetime.now().isoformat()
    with open('data.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è –¥–∞—Ç
def generate_slots_for_dates():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–æ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç —Å —Ä–∞–Ω–¥–æ–º–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é"""
    data = load_data()
    
    # –î–∞—Ç—ã —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    dates = [
        "01.10.2025(–ø–Ω)", "02.10.2025(–≤—Ç)", "03.10.2025(—Å—Ä)", 
        "04.10.2025(—á—Ç)", "05.10.2025(–ø—Ç)", "06.10.2025(—Å–±)", "07.10.2025(–≤—Å–∫)"
    ]
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    time_slots = [
        "10:00 - 11:00", "11:00 - 12:00", "12:00 - 13:00", "13:00 - 14:00",
        "14:00 - 15:00", "15:00 - 16:00", "16:00 - 17:00", "17:00 - 18:00",
        "18:00 - 19:00", "19:00 - 20:00", "20:00 - 21:00"
    ]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if not data['slots']:
        for date in dates:
            for time_slot in time_slots:
                slot_key = f"{date}_{time_slot}".replace("(", "").replace(")", "").replace(".", "_").replace(" ", "_").replace("-", "_")
                
                # –†–∞–Ω–¥–æ–º–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 3 –º–µ—Å—Ç
                max_capacity = random.randint(0, 3)
                
                data['slots'][slot_key] = {
                    'date': date,
                    'time': time_slot,
                    'users': [],
                    'max_capacity': max_capacity
                }
        
        save_data(data)
    
    return data

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Å–ª–æ—Ç—ã"))
    builder.add(types.KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏"))
    builder.adjust(2)
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.\n\n"
        "üìÖ <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Å–ª–æ—Ç—ã</b> - –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏\n"
        "üìã <b>–ú–æ–∏ –∑–∞–ø–∏—Å–∏</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode="HTML"
    )

@dp.message(lambda message: message.text == "üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ —Å–ª–æ—Ç—ã")
@dp.message(Command("slots"))
async def cmd_slots(message: types.Message):
    data = generate_slots_for_dates()
    
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    dates = sorted(list({slot['date'] for slot in data['slots'].values()}))
    
    if not dates:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    builder = InlineKeyboardBuilder()
    for date in dates:
        builder.button(text=date, callback_data=f"date_{date}")
    builder.adjust(2)
    
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith('date_'))
async def select_date(callback: types.CallbackQuery):
    selected_date = callback.data.replace('date_', '')
    data = load_data()
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    available_slots = []
    for slot_key, slot in data['slots'].items():
        if slot['date'] == selected_date:
            free_places = slot['max_capacity'] - len(slot['users'])
            if free_places > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ—Ç—ã —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
                available_slots.append((slot_key, slot['time'], free_places))
    
    if not available_slots:
        await callback.message.edit_text("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    builder = InlineKeyboardBuilder()
    for slot_key, time, free_places in available_slots:
        builder.button(
            text=f"‚è∞ {time} ({free_places} –º–µ—Å—Ç)",
            callback_data=f"slot_{slot_key}"
        )
    
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data="back_to_dates")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üìÖ <b>{selected_date}</b>\n\n"
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "back_to_dates")
async def back_to_dates(callback: types.CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç
    data = load_data()
    dates = sorted(list({slot['date'] for slot in data['slots'].values()}))
    
    builder = InlineKeyboardBuilder()
    for date in dates:
        builder.button(text=date, callback_data=f"date_{date}")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith('slot_'))
async def select_slot(callback: types.CallbackQuery):
    slot_key = callback.data.replace('slot_', '')
    data = load_data()
    
    if slot_key not in data['slots']:
        await callback.answer("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    slot = data['slots'][slot_key]
    free_slots = slot['max_capacity'] - len(slot['users'])
    
    if free_slots <= 0:
        await callback.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(callback.from_user.id)
    if user_id in data['users'] and data['users'][user_id]:
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_{slot_key}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_dates")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {slot['date']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {slot['time']}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {ADDRESS}\n"
        f"üë§ <b>–ò–º—è:</b> {callback.from_user.full_name}\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ –Ω–µ —Ä–∞–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–ø–∏—Å—å?",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data.startswith('confirm_'))
async def confirm_booking(callback: types.CallbackQuery):
    slot_key = callback.data.replace('confirm_', '')
    data = load_data()
    
    if slot_key not in data['slots']:
        await callback.answer("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    slot = data['slots'][slot_key]
    user_id = str(callback.from_user.id)
    user_name = callback.from_user.full_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    free_slots = slot['max_capacity'] - len(slot['users'])
    if free_slots <= 0:
        await callback.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in data['users'] and data['users'][user_id]:
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å")
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in data['users']:
        data['users'][user_id] = {}
    
    data['users'][user_id] = {
        'slot_key': slot_key,
        'date': slot['date'],
        'time': slot['time'],
        'timestamp': datetime.now().isoformat(),
        'user_name': user_name
    }
    
    slot['users'].append({
        'name': user_name,
        'user_id': user_id,
        'timestamp': datetime.now().isoformat()
    })
    
    save_data(data)
    
    await callback.answer("‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {slot['date']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {slot['time']}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {ADDRESS}\n"
        f"üë§ <b>–ò–º—è:</b> {user_name}\n"
        f"üìä <b>–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –æ—Å—Ç–∞–ª–æ—Å—å:</b> {free_slots - 1}\n\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'",
        parse_mode="HTML"
    )

@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
@dp.message(Command("my_records"))
async def cmd_my_records(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    
    if user_id not in data['users'] or not data['users'][user_id]:
        await message.answer("üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return
    
    record = data['users'][user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å (–∑–∞ 24 —á–∞—Å–∞)
    can_cancel = True
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        date_str = record['date'].split('(')[0]  # –£–±–∏—Ä–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        time_str = record['time'].split(' - ')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        appointment_dt = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
        now = datetime.now()
        
        if appointment_dt - now < timedelta(hours=24):
            can_cancel = False
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–º–µ–Ω—É
    
    response = (
        f"üìã <b>–í–∞—à–∞ –∑–∞–ø–∏—Å—å:</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {record['date']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {record['time']}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {ADDRESS}\n"
        f"üë§ <b>–ò–º—è:</b> {record['user_name']}\n"
    )
    
    if not can_cancel:
        response += "\n‚ö†Ô∏è <b>–û—Ç–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:</b> –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –¥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    builder = InlineKeyboardBuilder()
    if can_cancel:
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")
    else:
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", callback_data="no_cancel")
    
    await message.answer(response, reply_markup=builder.as_markup(), parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "cancel_booking")
async def cancel_booking(callback: types.CallbackQuery):
    data = load_data()
    user_id = str(callback.from_user.id)
    
    if user_id not in data['users'] or not data['users'][user_id]:
        await callback.answer("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    
    record = data['users'][user_id]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="keep_booking")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {record['date']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {record['time']}\n\n"
        f"–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "confirm_cancel")
async def confirm_cancel(callback: types.CallbackQuery):
    data = load_data()
    user_id = str(callback.from_user.id)
    
    if user_id not in data['users'] or not data['users'][user_id]:
        await callback.answer("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return
    
    record = data['users'][user_id]
    slot_key = record['slot_key']
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ—Ç–∞
    if slot_key in data['slots']:
        data['slots'][slot_key]['users'] = [
            u for u in data['slots'][slot_key]['users'] 
            if u.get('user_id') != user_id
        ]
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del data['users'][user_id]
    save_data(data)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!</b>\n\n"
        f"üìÖ <b>–û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è –¥–∞—Ç–∞:</b> {record['date']}\n"
        f"‚è∞ <b>–û—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> {record['time']}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "keep_booking")
async def keep_booking(callback: types.CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø–∏—Å–∏
    await cmd_my_records(callback.message)

@dp.callback_query(lambda c: c.data == "no_cancel")
async def no_cancel(callback: types.CallbackQuery):
    await callback.answer("‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞", show_alert=True)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n\n"
        "üìÖ <b>–ó–∞–ø–∏—Å—å –Ω–∞ —Å–ª–æ—Ç—ã</b> - –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ\n"
        "üìã <b>–ú–æ–∏ –∑–∞–ø–∏—Å–∏</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å\n"
        "‚ùì <b>/help</b> - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> {ADDRESS}\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–æ–∂–Ω–æ –Ω–µ —Ä–∞–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.\n"
        "–£ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å.",
        parse_mode="HTML"
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())